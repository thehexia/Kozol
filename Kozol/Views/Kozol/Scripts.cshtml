<script src="~/Scripts/Kozol/lib/jquery-2.1.1.js"></script>
<script src="~/Scripts/Kozol/lib/jquery.signalR-2.1.2.js"></script>
<script src="~/Scripts/Kozol/lib/knockout-3.2.0.debug.js"></script>
<script src="~/Scripts/Kozol/lib/moment.js"></script>
<script src="~/signalr/hubs"></script>
<link href="~/Content/Kozol.css" rel="stylesheet">

<script>
    (function (globalScope) {
        ko.observable.fn.get = function (id) {
            return this.peek()[id];
        };
        ko.observable.fn.set = function (id, value) {
            this.valueWillMutate();
            this.peek()[id] = value;
            this.valueHasMutated();
            return this;
        };
        ko.bindingHandlers.foreachprop = {
            transformObject: function (obj) {
                var properties = [];
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        properties.push({ key: key, value: obj[key] });
                    }
                }
                return properties;
            },
            init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.utils.unwrapObservable(valueAccessor()),
                    properties = ko.bindingHandlers.foreachprop.transformObject(value);
                ko.applyBindingsToNode(element, { foreach: properties }, bindingContext);
                return { controlsDescendantBindings: true };
            }
        };

        var kozol = function () {
            var Ω = this;

            Ω.loggedIn = @(Html.Raw((bool)(Session["loggedIn"] ?? false)).ToString().ToLower());
            Ω.userId = @(Html.Raw(((int?)Session["userId"]).HasValue ? ((int)Session["userId"]).ToString() : "null").ToString());
        };

        globalScope.kozol = kozol;
        return kozol;
    }(typeof window !== 'undefined' ? window : (typeof global !== 'undefined' ? global : this)));
</script>
